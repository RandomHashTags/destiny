

import DestinyBlueprint
import DestinyDefaults
import SwiftDiagnostics
import SwiftSyntax
import SwiftSyntaxMacros

extension RouterStorage {
    mutating func perfectHashStorage(
        mutable: Bool,
        context: some MacroExpansionContext,
        caseSensitive: Bool
    ) -> String {
        let namePrefix:String
        let staticRoutes:[(StaticRoute, FunctionCallExprSyntax)]
        let dynamicRoutes:[(DynamicRoute, FunctionCallExprSyntax)]
        let random:Int
        if caseSensitive {
            namePrefix = "CaseSensitive"
            random = autoGeneratedCaseSensitiveRespondersIndex
            staticRoutes = staticCaseSensitiveRoutes
            dynamicRoutes = dynamicCaseSensitiveRoutes
        } else {
            namePrefix = "CaseInsensitive"
            random = autoGeneratedCaseInsensitiveRespondersIndex
            staticRoutes = staticCaseInsensitiveRoutes
            dynamicRoutes = dynamicCaseInsensitiveRoutes
        }
        var enumDecl = StructDeclSyntax(
            leadingTrivia: "// MARK: \(namePrefix)ResponderStorage\(random)\n\(visibility)",
            name: "\(raw: namePrefix)ResponderStorage\(raw: random)",
            inheritanceClause: .init(
                inheritedTypes: .init(arrayLiteral:
                    .init(type: TypeSyntax.init(stringLiteral: "ResponderStorageProtocol"), trailingComma: ","),
                    .init(type: TypeSyntax.init(stringLiteral: "Copyable"))
                )
            ),
            memberBlock: .init(members: .init())
        )

        var routePaths = [String]()
        var routeResponders = [String]()
        var literalRouteResponders = [String]()

        appendStaticRoutes(
            context: context,
            middleware: staticMiddleware,
            isCaseSensitive: caseSensitive,
            routes: staticRoutes,
            routePaths: &routePaths,
            routeResponders: &routeResponders,
            literalRouteResponders: &literalRouteResponders
        )
        appendDynamicRoutes(
            context: context,
            isCaseSensitive: caseSensitive,
            routes: dynamicRoutes,
            routePaths: &routePaths,
            routeResponders: &routeResponders,
            literalRouteResponders: &literalRouteResponders
        )

        staticConstants(
            context: context,
            isCaseSensitive: caseSensitive,
            routePaths: routePaths,
            enumDecl: &enumDecl,
            literalRouteResponders: literalRouteResponders
        )

        generatedDecls.append(enumDecl)    
        if caseSensitive {
            autoGeneratedCaseSensitiveRespondersIndex += 1
        } else {
            autoGeneratedCaseInsensitiveRespondersIndex += 1
        }
        return "\(enumDecl.name.text)()"
    }
}

// MARK: Static routes
extension RouterStorage {
    mutating func appendStaticRoutes(
        context: some MacroExpansionContext,
        middleware: [CompiledStaticMiddleware],
        isCaseSensitive: Bool,
        routes: [(StaticRoute, FunctionCallExprSyntax)],
        routePaths: inout [String],
        routeResponders: inout [String],
        literalRouteResponders: inout [String]
    ) {
        let getRouteStartLine:(StaticRoute) -> String = isCaseSensitive ? { $0.startLine } : { $0.startLine.lowercased() }
        let getResponderValue:(RouterStorage.Route) -> String = {
            let responder = $0.responder
            return "// \($0.startLine)\nCompiledStaticResponderStorageRoute(\npath: \($0.buffer),\nresponder: \(responder)\n)"
        }
        for (route, function) in routes {
            do throws(HTTPMessageError) {
                var string = getRouteStartLine(route)
                if registeredPaths.contains(string) {
                    Router.routePathAlreadyRegistered(context: context, node: function, string)
                } else {
                    registeredPaths.insert(string)
                    let buffer = SIMD64<UInt8>(&string)
                    let httpResponse = route.response(context: context, function: function, middleware: middleware) as! HTTPResponseMessage // TODO: fix
                    if true /*route.supportedCompressionAlgorithms.isEmpty*/ {
                        if let responder = try responseBodyResponderDebugDescription(body: route.body, response: httpResponse) {
                            routePaths.append("\(string)")
                            literalRouteResponders.append(responder)
                            routeResponders.append(getResponderValue(.init(startLine: string, buffer: buffer, responder: responder)))
                            if isCaseSensitive {
                                if let index = staticCaseSensitiveRoutes.firstIndex(where: { $0.0.path == route.path && $0.1 == function }) {
                                    staticCaseSensitiveRoutes.remove(at: index)
                                }
                            } else {
                                if let index = staticCaseInsensitiveRoutes.firstIndex(where: { $0.0.path == route.path && $0.1 == function }) {
                                    staticCaseInsensitiveRoutes.remove(at: index)
                                }
                            }
                        } else {
                            context.diagnose(Diagnostic(node: function, message: DiagnosticMsg(id: "failedToGetResponderDebugDescriptionForResponseBody", message: "Failed to get responder debug description for response body; body=\(String(describing: route.body));function=\(function.debugDescription)", severity: .warning)))
                        }
                    } else if let httpResponse = httpResponse as? HTTPResponseMessage {
                        Router.conditionalRoute(
                            context: context,
                            conditionalResponders: &conditionalResponders,
                            route: route,
                            function: function,
                            string: string,
                            buffer: buffer,
                            httpResponse: httpResponse
                        )
                    } else {
                        context.diagnose(Diagnostic(node: function, message: DiagnosticMsg(id: "unexpectedHTTPResponseMessage", message: "Router.Storage;staticRoutesSyntax;conditionalRoute;httpResponse variable is not a HTTPResponseMessage")))
                    }
                }
            } catch {
                context.diagnose(Diagnostic(node: function, message: DiagnosticMsg(id: "staticRouteError", message: "\(error)")))
            }
        }
    }
}

// MARK: Dynamic routes
extension RouterStorage {
    mutating func appendDynamicRoutes(
        context: some MacroExpansionContext,
        isCaseSensitive: Bool,
        routes: [(DynamicRoute, FunctionCallExprSyntax)],
        routePaths: inout [String],
        routeResponders: inout [String],
        literalRouteResponders: inout [String]
    ) {
        let getRouteStartLine:(DynamicRoute) -> String = isCaseSensitive ? { $0.startLine() } : { $0.startLine().lowercased() }
        for (route, function) in routes {
            var paths = route.path
            guard paths.first(where: { !$0.isLiteral }) == nil else { continue }

            paths.insert(.literal(route.method.rawNameString() + " "), at: 0)
            let routePath = "\(paths.map({ $0.value }).joined(separator: "/")) \(route.version.string)"
            let string = getRouteStartLine(route)
            if registeredPaths.contains(string) {
                Router.routePathAlreadyRegistered(context: context, node: function, string)
            } else {
                registeredPaths.insert(string)
                let (responder, _) = getResponderValue(
                    route: .init(startLine: string, buffer: .init(string), responder: route.responderDebugDescription)
                )
                routePaths.append(routePath)
                literalRouteResponders.append(responder)

                if isCaseSensitive {
                    if let index = dynamicCaseSensitiveRoutes.firstIndex(where: { $0.0.path == route.path && $0.1 == function }) {
                        dynamicCaseSensitiveRoutes.remove(at: index)
                    }
                } else {
                    if let index = dynamicCaseInsensitiveRoutes.firstIndex(where: { $0.0.path == route.path && $0.1 == function }) {
                        dynamicCaseInsensitiveRoutes.remove(at: index)
                    }
                }
            }
        }
    }
}

// MARK: Static constants
extension RouterStorage {
    private func staticConstants(
        context: some MacroExpansionContext,
        isCaseSensitive: Bool,
        routePaths: [String],
        enumDecl: inout StructDeclSyntax,
        literalRouteResponders: [String]
    ) {
        let routePathSIMDs:[SIMD64<UInt8>] = routePaths.compactMap({
            let utf8 = $0.utf8
            var simd = SIMD64<UInt8>.zero
            guard utf8.count > 0 else { return nil }
            for i in 0..<min(simd.scalarCount, utf8.count) {
                simd[i] = utf8[utf8.index(utf8.startIndex, offsetBy: i)]
            }
            return simd
        })
        let routePathCaseNames = routePaths.map({ "`\($0)`" })

        var staticResponders = [VariableDeclSyntax]()
        var staticSIMDs = [VariableDeclSyntax]()
        for index in 0..<routePaths.count {
            let staticResponder = try! VariableDeclSyntax.init("""
            /// Request: `\(raw: routePaths[index])`
            \(raw: visibility)static let responder\(raw: index) = \(raw: literalRouteResponders[index])
            """)
            staticResponders.append(staticResponder)

            let staticSIMD = try! VariableDeclSyntax.init("""
            \(raw: visibility)static let simd\(raw: index) = \(raw: routePathSIMDs[index])
            """)
            staticSIMDs.append(staticSIMD)
        }

        let routeResponderDecl = try! FunctionDeclSyntax.init("""
        @inlinable
        \(raw: visibility)func respond(
            router: some HTTPRouterProtocol,
            socket: some FileDescriptor,
            request: inout some HTTPRequestProtocol & ~Copyable,
            completionHandler: @Sendable @escaping () -> Void
        ) throws(ResponderError) -> Bool {
            switch self {
            \(raw: routePathCaseNames.enumerated().map({ "case .\($0.element):\ntry Self.responder\($0.offset).respond(router: router, socket: socket, request: &request, completionHandler: completionHandler)" }).joined(separator: "\n"))
            }
            return true
        }
        """)
        var routeConstantsDecl = try! EnumDeclSyntax.init("""
        \(raw: visibility)enum Route: UInt16 {
        }
        """)
        for caseName in routePathCaseNames {
            routeConstantsDecl.memberBlock.members.append(.init(decl: try! EnumCaseDeclSyntax.init("case \(raw: caseName)")))
        }
        routeConstantsDecl.memberBlock.members.append(.init(decl: routeResponderDecl))
        routeConstantsDecl.memberBlock.members.append(contentsOf: staticResponders.map({ MemberBlockItemSyntax.init(decl: $0) }))
        enumDecl.memberBlock.members.append(.init(decl: routeConstantsDecl))

        var foundPerfectHash = false
        if perfectHashSettings.enabled {
            //let relaxedRoutePaths = routePaths.filter({ perfectHashSettings.relaxedRoutePaths.contains($0) }) // TODO: support
            for i in perfectHashSettings.maxBytes {
                if let perfectHashDecls = matchRoutePerfectHash(
                    routePaths: routePaths,
                    hashMaxBytes: i,
                    requireExactPaths: perfectHashSettings.requireExactPaths
                ) {
                    enumDecl.memberBlock.members.append(contentsOf: perfectHashDecls.map({ .init(decl: $0) }))
                    foundPerfectHash = true
                    break
                }
            }
        }
        if !foundPerfectHash {
            enumDecl.memberBlock.members.append(contentsOf: staticSIMDs.map({ .init(decl: $0) }))
            enumDecl.memberBlock.members.append(.init(decl: matchRouteFallback(routePaths: routePaths)))
        }

        let responderDecl = try! FunctionDeclSyntax.init("""
        @inlinable
        \(raw: visibility)func respond(
            router: some HTTPRouterProtocol,
            socket: some FileDescriptor,
            request: inout some HTTPRequestProtocol & ~Copyable,
            completionHandler: @Sendable @escaping () -> Void
        ) throws(ResponderError) -> Bool {
            let startLine:SIMD64<UInt8>
            do throws(SocketError) {
                startLine = try request.startLine\(raw: isCaseSensitive ? "" : "Lowercased")()
            } catch {
                throw .socketError(error)
            }
            guard let route = matchRoute(startLine) else { return false }
            return try route.respond(router: router, socket: socket, request: &request, completionHandler: completionHandler)
        }
        """)
        enumDecl.memberBlock.members.append(.init(decl: responderDecl))
    }
}

// MARK: Match route
extension RouterStorage {
    private func matchRoutePerfectHash(
        routePaths: [String],
        hashMaxBytes: Int,
        requireExactPaths: Bool
    ) -> [any DeclSyntaxProtocol]? {
        let routePathSIMDs:[PerfectHashableItem<SIMD64<UInt8>>] = routePaths.compactMap({
            let utf8 = $0.utf8
            var simd = SIMD64<UInt8>.zero
            guard utf8.count > 0 else { return nil }
            for i in 0..<min(simd.scalarCount, utf8.count) {
                simd[i] = utf8[utf8.index(utf8.startIndex, offsetBy: i)]
            }
            return .init($0, simd)
        })

        let perfectHashGenerator = PerfectHashGenerator(routes: routePathSIMDs, maxBytes: hashMaxBytes)
        var candidate:HashCandidate? = nil
        var hashTable:[UInt8]? = nil
        var verificationKeys:[UInt64]? = nil
        var efficiency:Double = 0
        if let result = perfectHashGenerator.findMinimalPerfectHash() {
            candidate = result.candidate
            hashTable = result.result.hashTable
            verificationKeys = result.result.verificationKeys
            efficiency = 100
        } else if let result = perfectHashGenerator.generatePerfectHash() {
            candidate = result.candidate
            hashTable = result.hashTable
            verificationKeys = result.verificationKeys
            efficiency = result.efficiency
        }
        guard let candidate, let hashTable, let verificationKeys else { return nil }

        let routeEntryInitializeLogic:(Int, UInt64) -> String
        if perfectHashSettings.requireExactPaths {
            routeEntryInitializeLogic = { index, key in
                return "\(routePathSIMDs[index].simd), \(key)"
            }
        } else {
            routeEntryInitializeLogic = { index, key in
                return "\(key)"
            }
        }
        let staticRoutesTableString = hashTable.map({
            guard $0 != 255 else { return "nil" }
            let key = verificationKeys[Int($0)]
            return ".init(.`\(routePaths[Int($0)])`, \(routeEntryInitializeLogic(Int($0), key)))"
        }).joined(separator: ",\n")
        let hashTableDecl = VariableDeclSyntax.init(
            modifiers: .init(arrayLiteral: DeclModifierSyntax.init(name: "static")),
            .let,
            name: "hashTable",
            type: .init(type: TypeSyntax.init(stringLiteral: "InlineArray<\(hashTable.count), RouteEntry?>")),
            initializer: .init(leadingTrivia: " ", value: ExprSyntax.init(stringLiteral: "[\n\(staticRoutesTableString)\n]"))
        )

        let positions = perfectHashGenerator.positions
        var extractKeyLiteral = ""
        for offset in 0..<hashMaxBytes {
            var s = "UInt64(simd[\(positions[offset])])"
            if offset != 0 {
                s = "\n    | (\(s) << \(offset * hashMaxBytes))"
            }
            extractKeyLiteral += s
        }

        let extractKeyDecl = try! FunctionDeclSyntax.init("""
        @inlinable @inline(__always)
        \(raw: visibility)func extractKey(_ simd: SIMD64<UInt8>) -> UInt64 {
            return \(raw: extractKeyLiteral)
        }
        """)

        let perfectHashDecl = try! FunctionDeclSyntax.init("""
        @inlinable @inline(__always)
        \(raw: visibility)func perfectHash(
            _ simd: SIMD64<UInt8>
        ) -> (key: UInt64, hash: Int) {
            let key = extractKey(simd)
            return (key, Int(((key &* \(raw: candidate.multiplier)) >> \(raw: candidate.shift)) & \(raw: candidate.mask)))
        }
        """)

        let routeEntryDecl = matchRoutePerfectHashEntry(hashMaxBytes: hashMaxBytes, requireExactPaths: requireExactPaths, efficiency: efficiency)
        let matchRouteDecl = matchRoutePerfectHashDecl(hashTable: hashTable, hashMaxBytes: hashMaxBytes, requireExactPaths: requireExactPaths)
        return [
            routeEntryDecl,
            hashTableDecl,
            extractKeyDecl,
            perfectHashDecl,
            matchRouteDecl
        ]
    }
    private func matchRoutePerfectHashEntry(
        hashMaxBytes: Int,
        requireExactPaths: Bool,
        efficiency: Double
    ) -> StructDeclSyntax {
        let simd:(variable: String, initializer: String, assignment: String)
        if requireExactPaths {
            simd = (
                "let simd:SIMD64<UInt8>\n",
                "_ simd: SIMD64<UInt8>,\n",
                "self.simd = simd\n"
            )
        } else {
            simd = ("", "", "")
        }
        return try! StructDeclSyntax.init("""
        struct RouteEntry: Sendable { // found perfect hash with \(raw: hashMaxBytes) characters (\(raw: efficiency)% efficiency)
            let key:UInt64
            \(raw: simd.variable)let route:Route
            init(
                _ route: Route,
                \(raw: simd.initializer)_ key: UInt64
            ) {
                self.route = route
                \(raw: simd.assignment)self.key = key
            }
        }
        """)
    }
    private func matchRoutePerfectHashDecl(
        hashTable: [UInt8],
        hashMaxBytes: Int,
        requireExactPaths: Bool
    ) -> FunctionDeclSyntax {
        let additionalCheck = hashTable.count != 1 ? "" : """
        guard hashIndex < \(hashTable.count) else { return nil }
        """
        let returnLogic:String
        if requireExactPaths {
            returnLogic = "entry.simd == simd ? entry.route : nil"
        } else {
            returnLogic = "entry.route"
        }
        return try! FunctionDeclSyntax.init("""
        @inlinable @inline(__always)
        \(raw: visibility)func matchRoute(_ simd: SIMD64<UInt8>) -> Route? {
            let (key, hashIndex) = perfectHash(simd)
            \(raw: additionalCheck)guard let entry = Self.hashTable[hashIndex] else { return nil }
            if entry.key != key { // hash collision
                return nil
            }
            return \(raw: returnLogic)
        }
        """)
    }

    private func matchRouteFallback(
        routePaths: [String]
    ) -> FunctionDeclSyntax {
        return try! FunctionDeclSyntax.init("""
        @inlinable
        \(raw: visibility)func matchRoute(_ simd: SIMD64<UInt8>) -> Route? {
            switch simd {
            \(raw: (0..<routePaths.count).map({ "case Self.simd\($0): .`\(routePaths[$0])`" }).joined(separator: "\n"))
            default: nil
            }
        }
        """)
    }
}