
import DestinyBlueprint
import DestinyDefaults
import SwiftDiagnostics
import SwiftSyntax
import SwiftSyntaxMacros

// MARK: Static routes string
extension RouterStorage {
    mutating func staticRoutesSyntax(
        mutable: Bool,
        context: some MacroExpansionContext,
        isCaseSensitive: Bool,
        redirects: inout [(any RedirectionRouteProtocol, SyntaxProtocol)],
        middleware: [CompiledStaticMiddleware],
        routes: [(StaticRoute, FunctionCallExprSyntax)]
    ) -> (copyable: String?, noncopyable: String?)? {
        guard !routes.isEmpty else { return nil }

        let random:Int
        let namePrefix:String
        let getRedirectRouteStartLine:(any RedirectionRouteProtocol) -> String
        if isCaseSensitive {
            random = autoGeneratedCaseSensitiveRespondersIndex
            namePrefix = "CaseSensitive"
            getRedirectRouteStartLine = { $0.fromStartLine() }
        } else {
            random = autoGeneratedCaseInsensitiveRespondersIndex
            namePrefix = "CaseInsensitive"
            getRedirectRouteStartLine = { $0.fromStartLine().lowercased() }
        }

        let copyable:String?
        let noncopyable:String?
        if let decl = decl(
            context: context,
            isCaseSensitive: isCaseSensitive,
            isCopyable: true,
            random: random,
            namePrefix: namePrefix,
            getRedirectRouteStartLine: getRedirectRouteStartLine,
            redirects: &redirects,
            middleware: middleware,
            routes: routes
        ) {
            copyable = "\(decl.name.text)()"
        } else {
            copyable = nil
        }
        if let decl = decl(
            context: context,
            isCaseSensitive: isCaseSensitive,
            isCopyable: false,
            random: random,
            namePrefix: namePrefix,
            getRedirectRouteStartLine: getRedirectRouteStartLine,
            redirects: &redirects,
            middleware: middleware,
            routes: routes
        ) {
            noncopyable = "\(decl.name.text)()"
        } else {
            noncopyable = nil
        }
        return copyable != nil || noncopyable != nil ? (copyable, noncopyable) : nil
    }

    private mutating func decl(
        context: some MacroExpansionContext,
        isCaseSensitive: Bool,
        isCopyable: Bool,
        random: Int,
        namePrefix: String,
        getRedirectRouteStartLine: (any RedirectionRouteProtocol) -> String,
        redirects: inout [(any RedirectionRouteProtocol, SyntaxProtocol)],
        middleware: [CompiledStaticMiddleware],
        routes: [(StaticRoute, FunctionCallExprSyntax)]
    ) -> StructDeclSyntax? {
        let getResponderValue:(RouterStorage.Route) -> String = {
            let responder = $0.responder
            return "// \($0.startLine)\nCompiledStaticResponderStorageRoute(\npath: \($0.buffer),\nresponder: \(responder)\n)"
        }

        var routePaths = [String]()
        var literalRouteResponders = [String]()
        var routeResponders = [String]()
        routePaths.reserveCapacity(routes.count)
        literalRouteResponders.reserveCapacity(routes.count)
        routeResponders.reserveCapacity(routes.count)
        if !redirects.isEmpty && !isCopyable { // always make redirects noncopyable
            for (route, function) in redirects {
                var string = getRedirectRouteStartLine(route)
                guard !registeredPaths.contains(string) else {
                    Router.routePathAlreadyRegistered(context: context, node: function, string)
                    continue
                }
                registeredPaths.insert(string)
                do throws(AnyError) {
                    let responder = try IntermediateResponseBody(
                        type: .staticStringWithDateHeader,
                        ""
                    ).responderDebugDescription(isCopyable: isCopyable, response: route.response())
                    routePaths.append("\(string)")
                    routeResponders.append(getResponderValue(.init(startLine: string, buffer: .init(&string), responder: responder)))
                    literalRouteResponders.append(responder)
                } catch {
                    context.diagnose(Diagnostic(node: function, message: DiagnosticMsg(id: "staticRedirectError", message: "\(error)")))
                }
            }
            redirects = []
        }
        appendStaticRoutes(
            context: context,
            middleware: middleware,
            isCaseSensitive: isCaseSensitive,
            isCopyable: isCopyable,
            routes: routes,
            literalRoutePaths: &routePaths,
            routeResponders: &routeResponders,
            literalRouteResponders: &literalRouteResponders
        )

        let enumDecl = StructDeclSyntax(
            leadingTrivia: "// MARK: \(namePrefix)StaticResponderStorage\(random)\n\(visibility)",
            name: "\(raw: namePrefix)StaticResponderStorage\(raw: random)",
            inheritanceClause: .init(
                inheritedTypes: .init(arrayLiteral:
                    .init(type: TypeSyntax.init(stringLiteral: "\(isCopyable ? "" : "NonCopyable")StaticResponderStorageProtocol"), trailingComma: ","),
                    .init(type: TypeSyntax.init(stringLiteral: "\(isCopyable ? "" : "~")Copyable"))
                )
            ),
            memberBlock: .init(members: .init())
        )

        generatedDecls.append(enumDecl)    
        if isCaseSensitive {
            autoGeneratedCaseSensitiveRespondersIndex += 1
        } else {
            autoGeneratedCaseInsensitiveRespondersIndex += 1
        }
        return enumDecl
    }

    func responseBodyResponderDebugDescription(
        isCopyable: Bool,
        body: (any ResponseBodyProtocol)?,
        response: HTTPResponseMessage
    ) throws(HTTPMessageError) -> String? {
        guard let body else { return nil }
        let s:String?
        if let v = body as? String {
            s = try v.responderDebugDescription(response)
        } else if let v = body as? IntermediateResponseBody {
            s = v.responderDebugDescription(isCopyable: isCopyable, response: response)

        } else {
            s = nil
        }
        return s
    }
}