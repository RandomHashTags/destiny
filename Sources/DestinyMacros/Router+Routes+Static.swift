
import DestinyBlueprint
import DestinyDefaults
import SwiftDiagnostics
import SwiftSyntax
import SwiftSyntaxMacros

#if NonEmbedded
import DestinyDefaultsNonEmbedded
#endif

// MARK: Static routes string
extension RouterStorage {
    mutating func staticRoutesResponder(
        isCaseSensitive: Bool
    ) -> CompiledRouterStorage.Responder? {
        let routes = isCaseSensitive ? staticRouteStorage.caseSensitiveRoutes : staticRouteStorage.caseInsensitiveRoutes
        guard !routes.isEmpty || !staticRedirects.isEmpty else { return nil }

        let random:Int
        let namePrefix:String
        let getRedirectRouteStartLine:(any RedirectionRouteProtocol) -> String
        if isCaseSensitive {
            random = autoGeneratedCaseSensitiveRespondersIndex
            namePrefix = "CaseSensitive"
            getRedirectRouteStartLine = { $0.fromStartLine() }
        } else {
            random = autoGeneratedCaseInsensitiveRespondersIndex
            namePrefix = "CaseInsensitive"
            getRedirectRouteStartLine = { $0.fromStartLine().lowercased() }
        }

        let copyable:String?
        let noncopyable:String?
        if let decl = responderStorageDecl(
            isCaseSensitive: isCaseSensitive,
            isCopyable: true,
            random: random,
            namePrefix: namePrefix,
            getRedirectRouteStartLine: getRedirectRouteStartLine,
            routes: routes
        ) {
            copyable = "\(decl.name.text)()"
        } else {
            copyable = nil
        }
        if let decl = responderStorageDecl(
            isCaseSensitive: isCaseSensitive,
            isCopyable: false,
            random: random,
            namePrefix: namePrefix,
            getRedirectRouteStartLine: getRedirectRouteStartLine,
            routes: routes
        ) {
            noncopyable = "\(decl.name.text)()"
        } else {
            noncopyable = nil
        }
        return .get(copyable, noncopyable)
    }
}

// MARK: Responder storage decl
extension RouterStorage {
    private mutating func responderStorageDecl(
        isCaseSensitive: Bool,
        isCopyable: Bool,
        random: Int,
        namePrefix: String,
        getRedirectRouteStartLine: (any RedirectionRouteProtocol) -> String,
        routes: [(StaticRoute, FunctionCallExprSyntax)]
    ) -> StructDeclSyntax? {
        var routePaths = [String]()
        var literalRouteResponders = [String]()
        routePaths.reserveCapacity(routes.count)
        literalRouteResponders.reserveCapacity(routes.count)
        appendStaticRoutes(
            isCaseSensitive: isCaseSensitive,
            isCopyable: isCopyable,
            routes: routes,
            routePaths: &routePaths,
            routeResponders: &literalRouteResponders
        )
        guard !routePaths.isEmpty else { return nil }

        let name = "\(namePrefix)ResponderStorage\(random)"
        let enumDecl = StructDeclSyntax(
            leadingTrivia: "// MARK: \(name)\n",
            modifiers: [visibilityModifier],
            name: "\(raw: name)",
            inheritanceClause: .init(
                inheritedTypes: responderStorageProtocolConformances(isCopyable: isCopyable, protocolConformance: settings.hasProtocolConformances)
            ),
            memberBlock: .init(members: .init())
        )

        generatedDecls.append(enumDecl)    
        if isCaseSensitive {
            autoGeneratedCaseSensitiveRespondersIndex += 1
        } else {
            autoGeneratedCaseInsensitiveRespondersIndex += 1
        }
        return enumDecl
    }
}

// MARK: Append routes
extension RouterStorage {
    mutating func appendStaticRoutes(
        isCaseSensitive: Bool,
        isCopyable: Bool,
        routes: [(StaticRoute, FunctionCallExprSyntax)],
        routePaths: inout [String],
        routeResponders: inout [String]
    ) {
        let getResponderValue:(RouterStorage.Route) -> String = {
            "// \($0.startLine)\nCompiledStaticResponderStorageRoute(\npath: \($0.buffer),\nresponder: \($0.responder)\n)"
        }
        let routeStartLine:(StaticRoute) -> String
        let getRedirectRouteStartLine:(StaticRedirectionRoute) -> String
        if isCaseSensitive {
            routeStartLine = routeStartLineLiteral
            getRedirectRouteStartLine = redirectRouteStartLineLiteral
        } else {
            routeStartLine = routeStartLineLowercased
            getRedirectRouteStartLine = redirectRouteStartLineLowercased
        }
        if !isCopyable { // always make redirects noncopyable for optimal performance
            appendStaticRedirects(
                isCaseSensitive: isCaseSensitive,
                isCopyable: isCopyable,
                routePaths: &routePaths,
                routeResponders: &routeResponders,
                getRedirectRouteStartLine: getRedirectRouteStartLine,
                getResponderValue: getResponderValue
            )
        }
        for (route, function) in routes {
            var startLine = routeStartLine(route)
            let buffer = SIMD64<UInt8>(&startLine)
            let httpResponse = route.response(context: context, function: function, middleware: staticMiddleware)
            if true /*route.supportedCompressionAlgorithms.isEmpty*/ {
                if let intermediateBody = route.body as? IntermediateResponseBody {
                    guard isCopyable != intermediateBody.isNoncopyable else {
                        continue
                    }
                }
                guard !registeredPaths.contains(startLine) else {
                    Router.routePathAlreadyRegistered(context: context, node: function, startLine)
                    continue
                }
                do throws(HTTPMessageError) {
                    guard let responder = try responseBodyResponderDebugDescription(isCopyable: isCopyable, body: route.body, response: httpResponse) else {
                        context.diagnose(.init(node: function, message: DiagnosticMsg(id: "failedToGetResponderDebugDescriptionForResponseBody", message: "Failed to get responder debug description for response body; body=\(String(describing: route.body));function=\(function.debugDescription)", severity: .warning)))
                        continue
                    }
                    registeredPaths.insert(startLine)
                    routePaths.append("\(startLine)")
                    routeResponders.append(responder)
                    staticRouteStorage.remove(isCaseSensitive: isCaseSensitive, path: route.path, function: function)
                } catch {
                    context.diagnose(.init(node: function, message: DiagnosticMsg(id: "staticRouteError", message: "\(error)")))
                }
            } else {
                guard !registeredPaths.contains(startLine) else {
                    Router.routePathAlreadyRegistered(context: context, node: function, startLine)
                    continue
                }
                registeredPaths.insert(startLine)
                Router.conditionalRoute(
                    context: context,
                    conditionalResponders: &conditionalResponders,
                    route: route,
                    function: function,
                    string: startLine,
                    buffer: buffer,
                    httpResponse: httpResponse
                )
            }
        }
    }

    private func responseBodyResponderDebugDescription(
        isCopyable: Bool,
        body: (any ResponseBodyProtocol)?,
        response: some HTTPMessageProtocol
    ) throws(HTTPMessageError) -> String? {
        guard let body else { return nil }
        let s:String?
        if let v = body as? String {
            s = try v.responderDebugDescription(response)
        } else if let v = body as? IntermediateResponseBody {
            s = v.responderDebugDescription(isCopyable: isCopyable, response: response)
        } else {
            s = nil
        }
        return s
    }
}

extension RouterStorage {
    private func routeStartLineLiteral(_ route: some StaticRouteProtocol) -> String {
        route.startLine
    }
    private func routeStartLineLowercased(_ route: some StaticRouteProtocol) -> String {
        route.startLine.lowercased()
    }

    private func redirectRouteStartLineLiteral(_ route: some RedirectionRouteProtocol) -> String {
        route.fromStartLine()
    }
    private func redirectRouteStartLineLowercased(_ route: some RedirectionRouteProtocol) -> String {
        route.fromStartLine().lowercased()
    }
}

// MARK: Append redirects
extension RouterStorage {
    private mutating func appendStaticRedirects(
        isCaseSensitive: Bool,
        isCopyable: Bool,
        routePaths: inout [String],
        routeResponders: inout [String],
        getRedirectRouteStartLine: (StaticRedirectionRoute) -> String,
        getResponderValue: (RouterStorage.Route) -> String
    ) {
        var removedRedirects = [Int]()
        removedRedirects.reserveCapacity(staticRedirects.count)
        for (index, redirect) in staticRedirects.enumerated() {
            let (route, function) = redirect
            guard route.isCaseSensitive == isCaseSensitive else {
                continue
            }
            let string = getRedirectRouteStartLine(route)
            guard !registeredPaths.contains(string) else {
                Router.routePathAlreadyRegistered(context: context, node: function, string)
                continue
            }
            registeredPaths.insert(string)
            routePaths.append(string)
            removedRedirects.append(index)

            #if NonEmbedded
            let response = route.nonEmbeddedResponse()
            #elseif GenericHTTPResponseMessage
            let response = route.genericResponse()
            #endif

            let responder = IntermediateResponseBody(
                type: .staticStringWithDateHeader,
                ""
            ).responderDebugDescription(isCopyable: isCopyable, response: response)
            routeResponders.append(responder)
        }
        for i in removedRedirects.reversed() {
            staticRedirects.remove(at: i)
        }
    }
}