
import DestinyBlueprint
import DestinyDefaults
import DestinyDefaultsNonEmbedded // TODO: fix
import SwiftSyntax
import SwiftSyntaxMacros

extension RouteGroup {
    /// Parsing logic for this route group.
    /// 
    /// - Parameters:
    ///   - context: Macro expansion context.
    ///   - version: `HTTPVersion` of the router this route group belongs to.
    ///   - staticMiddleware: Static middleware of the router this route group belongs to.
    ///   - dynamicMiddleware: Dynamic middleware of the router this route group belongs to.
    ///   - function: `FunctionCallExprSyntax` that represents this route group at compile time.
    public static func parse(
        context: some MacroExpansionContext,
        settings: RouterSettings,
        perfectHashSettings: PerfectHashSettings,
        version: HTTPVersion,
        staticMiddleware: [CompiledStaticMiddleware],
        dynamicMiddleware: [FunctionCallExprSyntax],
        storage: inout RouterStorage,
        _ function: FunctionCallExprSyntax
    ) -> (decl: DeclSyntax, storage: RouterStorage) {
        var routeGroupStorage = RouterStorage(context: context, settings: settings, perfectHashSettings: perfectHashSettings)
        routeGroupStorage.autoGeneratedCaseSensitiveRespondersIndex = storage.autoGeneratedCaseSensitiveRespondersIndex
        routeGroupStorage.autoGeneratedCaseInsensitiveRespondersIndex = storage.autoGeneratedCaseInsensitiveRespondersIndex
        routeGroupStorage.autoGeneratedDynamicRespondersIndex = storage.autoGeneratedDynamicRespondersIndex
        routeGroupStorage.staticMiddleware = staticMiddleware

        var endpoint = ""
        var conditionalResponders = [SIMD64<UInt8>:any ConditionalRouteResponderProtocol]()
        for f in dynamicMiddleware {
            Router.parseDynamicMiddleware(context: context, function: f, storage: &routeGroupStorage)
        }
        
        for arg in function.arguments {
            if let label = arg.label?.text {
                switch label {
                case "endpoint":
                    guard let string = arg.expression.stringLiteralString(context: context) else { break }
                    endpoint = string
                case "staticMiddleware":
                    guard let array = arg.expression.arrayElements(context: context) else { break }
                    for arg in array {
                        if let function = arg.expression.functionCall {
                            Router.parseStaticMiddleware(context: context, function: function, storage: &routeGroupStorage)
                        }
                    }
                case "dynamicMiddleware":
                    guard let array = arg.expression.arrayElements(context: context) else { break }
                    for arg in array {
                        if let function = arg.expression.functionCall {
                            Router.parseDynamicMiddleware(context: context, function: function, storage: &routeGroupStorage)
                        }
                    }
                default:
                    context.diagnose(DiagnosticMsg.unhandled(node: arg))
                }
            } else if let function = arg.expression.functionCall {
                Router.parseRoute(context: context, version: version, function: function, storage: &routeGroupStorage)
            }
        }

        let prefixEndpoints = endpoint.split(separator: "/").map({ String($0) })
        let pathComponents = prefixEndpoints.map({ PathComponent.literal($0) })

        let dynamicMiddlewareString = routeGroupStorage.dynamicMiddleware.map({ "\($0)" }).joined(separator: ",\n")

        let immutableDynamicMiddlewareSyntax:String
        if routeGroupStorage.dynamicMiddleware.isEmpty {
            immutableDynamicMiddlewareSyntax = "Optional<CompiledDynamicMiddlewareStorage<DynamicMiddleware>>.none"
        } else {
            immutableDynamicMiddlewareSyntax = "CompiledDynamicMiddlewareStorage((\n\(dynamicMiddlewareString)\n))"
        }

        // TODO: fix

        for i in routeGroupStorage.staticCaseInsensitiveRoutes.indices {
            var (route, function) = routeGroupStorage.staticCaseInsensitiveRoutes[i]
            route.insertPath(contentsOf: prefixEndpoints, at: 0)
            routeGroupStorage.staticCaseInsensitiveRoutes[i] = (route, function)
        }
        let staticRespondersString = routeGroupStorage.staticRoutesResponder(
            isCaseSensitive: false
        )

        for i in routeGroupStorage.dynamicCaseInsensitiveRoutes.indices {
            var (route, function) = routeGroupStorage.dynamicCaseInsensitiveRoutes[i]
            route.insertPath(contentsOf: pathComponents, at: 0)
            routeGroupStorage.dynamicCaseInsensitiveRoutes[i] = (route, function)
        }
        let dynamicRespondersSyntax = routeGroupStorage.dynamicRoutesResponder(
            isCaseSensitive: false
        )

        let compiled = """
        CompiledRouteGroup(
            prefixEndpoints: \(prefixEndpoints),
            immutableDynamicMiddleware: \(immutableDynamicMiddlewareSyntax),
            immutableStaticResponders: \(staticRespondersString),
            immutableDynamicResponders: \(dynamicRespondersSyntax),
            mutableStaticResponders: StaticResponderStorage(),
            mutableDynamicResponders: DynamicResponderStorage()
        )
        """

        storage.autoGeneratedCaseSensitiveRespondersIndex = routeGroupStorage.autoGeneratedCaseSensitiveRespondersIndex
        storage.autoGeneratedCaseInsensitiveRespondersIndex = routeGroupStorage.autoGeneratedCaseInsensitiveRespondersIndex
        storage.autoGeneratedDynamicRespondersIndex = routeGroupStorage.autoGeneratedDynamicRespondersIndex
        return (DeclSyntax(stringLiteral: compiled), routeGroupStorage)
    }
}