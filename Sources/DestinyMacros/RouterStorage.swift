
import DestinyBlueprint
import DestinyDefaults
import SwiftSyntax
import SwiftSyntaxMacros

#if NonEmbedded
import DestinyDefaultsNonEmbedded
#endif

public struct RouterStorage {
    let context:MacroExpansionContext
    let settings:RouterSettings
    let perfectHashSettings:PerfectHashSettings
    var generatedDecls = MemberBlockItemListSyntax()

    var autoGeneratedDynamicRespondersIndex = 0
    var autoGeneratedCaseSensitiveRespondersIndex = 0
    var autoGeneratedCaseInsensitiveRespondersIndex = 0
    var upgradeExistentialDynamicMiddleware = [FunctionCallExprSyntax]()

    var dynamicMiddleware = [FunctionCallExprSyntax]()
    var dynamicRedirects:[(any RedirectionRouteProtocol, FunctionCallExprSyntax)] = []

    #if NonEmbedded
    var conditionalResponders:[RoutePath:ConditionalRouteResponder] = [:]
    #endif

    var dynamicRouteStorage = DynamicRouteStorage()
    var staticRouteStorage = StaticRouteStorage()

    #if StaticMiddleware
    var staticMiddleware = [CompiledStaticMiddleware]()
    #endif

    var staticRedirects:[(StaticRedirectionRoute, FunctionCallExprSyntax)] = []

    var routeGroups = [any DeclSyntaxProtocol]()

    var registeredPaths:Set<String> = []

    lazy var autoGeneratedOpaqueDynamicMiddleware: String? = {
        guard !upgradeExistentialDynamicMiddleware.isEmpty else { return nil }
        for (i, function) in upgradeExistentialDynamicMiddleware.enumerated() {
            guard let statements = function.arguments.first?.expression.as(ClosureExprSyntax.self)?.statements else {
                continue
            }
            var functionString = ""
            for statement in statements {
                functionString += statement.trimmedDescription + "\n"
            }
            let protocolConformance = settings.hasProtocolConformances ? "OpaqueDynamicMiddlewareProtocol" : "Sendable"
            let name = "OpaqueDynamicMiddleware\(i)"
            let decl = try! StructDeclSyntax.init(.init(stringLiteral: """
            // MARK: \(name)
            \(visibility)struct \(name): \(protocolConformance) {

                \(inlinableAnnotation)
                \(visibility)func customLogic(
                    request: \(requestTypeSyntax),
                    response: inout some DynamicResponseProtocol
                ) throws(MiddlewareError) {
                    do { // TODO: use typed throw
                        \(functionString)
                    } catch {
                        throw .custom("\(name)HandleError;\\(error)")
                    }
                }

                \(inlinableAnnotation)
                \(visibility)func handle(
                    request: \(requestTypeSyntax),
                    response: inout some DynamicResponseProtocol
                ) throws(MiddlewareError) -> Bool {
                    try customLogic(request: &request, response: &response)
                    return true
                }
            }
            """))
            generatedDecls.append(decl)
        }
        return ""
    }()

    var visibility: RouterVisibility {
        settings.visibility
    }

    let visibilityModifier:DeclModifierSyntax
    let requestTypeSyntax:TypeSyntax

    func routerParameter(isCopyable: Bool, protocolConformances: Bool) -> String {
        if isCopyable {
            if protocolConformances {
                return "some HTTPRouterProtocol"
            } else {
                return "CompiledHTTPRouter._Copyable"
            }
        } else {
            if protocolConformances {
                return "borrowing some NonCopyableHTTPRouterProtocol & ~Copyable"
            } else {
                return "borrowing CompiledHTTPRouter._NonCopyable"
            }
        }
    }

    static func responderParameter(copyable: Bool, dynamic: Bool) -> String {
        let name = dynamic ? "Dynamic" : "Static"
        if copyable {
            return "some \(name)RouteResponderProtocol"
        } else {
            return "borrowing some NonCopyable\(name)RouteResponderProtocol & ~Copyable"
        }
    }
}

// MARK: Init
extension RouterStorage {
    init(
        context: MacroExpansionContext,
        settings: RouterSettings,
        perfectHashSettings: PerfectHashSettings
    ) {
        self.context = context
        self.settings = settings
        self.perfectHashSettings = perfectHashSettings
        visibilityModifier = settings.visibility.modifierDecl
        requestTypeSyntax = settings.requestTypeSyntax
    }
}

// MARK: Misc

extension RouterStorage {
    mutating func routeGroupsString() -> String {
        guard !routeGroups.isEmpty else { return "" }
        var string = "\n"
        for group in routeGroups {
            string += "\(group),\n"
        }
        string.removeLast(2)
        string += "\n"
        return string
    }

    mutating func dynamicMiddlewareArray() -> [String] {
        var array = [String]()
        if autoGeneratedOpaqueDynamicMiddleware != nil {
            array.append(contentsOf: upgradeExistentialDynamicMiddleware.enumerated().map({ "OpaqueDynamicMiddleware\($0.offset)()" }))
        }
        if !dynamicMiddleware.isEmpty {
            array.append(contentsOf: dynamicMiddleware.map({ "\($0)" }))
        }
        return array
    }
}

// MARK: Conditional responders string
extension RouterStorage {
    func conditionalRespondersString() -> String {
        var string = ""
        #if NonEmbedded
        if conditionalResponders.isEmpty {
            string = ":"
        } else {
            string = ""
            for (routePath, route) in conditionalResponders {
                string += "\n\(routePath.comment)\n\(routePath.path) : \(route.debugDescription),"
            }
            string.removeLast()
            string += "\n"
        }
        #endif
        return string
    }
}

// MARK: Route
extension RouterStorage {
    struct Route {
        let startLine:String
        let buffer:SIMD64<UInt8>
        let responder:String

        var path: Substring {
            startLine.split(separator: " ")[1]
        }
        var paths: [Substring] {
            path.split(separator: "/")
        }
    }
}