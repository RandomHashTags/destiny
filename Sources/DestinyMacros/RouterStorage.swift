
import DestinyBlueprint
import DestinyDefaults
import SwiftSyntax
import SwiftSyntaxMacros

public struct RouterStorage {
    let visibility:RouterVisibility
    let perfectHashSettings:PerfectHashSettings
    var generatedDecls:[any DeclSyntaxProtocol] = []

    var autoGeneratedDynamicRespondersIndex = 0
    var autoGeneratedCaseSensitiveRespondersIndex = 0
    var autoGeneratedCaseInsensitiveRespondersIndex = 0
    var upgradeExistentialDynamicMiddleware:[FunctionCallExprSyntax] = []

    var dynamicMiddleware:[FunctionCallExprSyntax] = []
    var dynamicRedirects:[(any RedirectionRouteProtocol, SyntaxProtocol)] = []
    var dynamicCaseInsensitiveRoutes:[(DynamicRoute, FunctionCallExprSyntax)] = []
    var dynamicCaseSensitiveRoutes:[(DynamicRoute, FunctionCallExprSyntax)] = []

    var staticMiddleware:[CompiledStaticMiddleware] = []
    var staticRedirects:[(any RedirectionRouteProtocol, SyntaxProtocol)] = []
    var staticCaseInsensitiveRoutes:[(StaticRoute, FunctionCallExprSyntax)] = []
    var staticCaseSensitiveRoutes:[(StaticRoute, FunctionCallExprSyntax)] = []
    
    var routeGroups:[any DeclSyntaxProtocol] = []

    var conditionalResponders:[RoutePath:any ConditionalRouteResponderProtocol] = [:]
    var registeredPaths:Set<String> = []

    mutating func routeGroupsString(context: some MacroExpansionContext) -> String {
        var string = ""
        if !routeGroups.isEmpty {
            string += "\n" + routeGroups.map({ "\($0)" }).joined(separator: ",\n") + "\n"
        }
        return string
    }

    func staticMiddlewareString() -> String {
        return staticMiddleware.isEmpty ? "" : "\n" + staticMiddleware.map({ "\($0)" }).joined(separator: ",\n") + "\n"
    }

    lazy var autoGeneratedOpaqueDynamicMiddleware: String? = {
        guard !upgradeExistentialDynamicMiddleware.isEmpty else { return nil }
        for (i, function) in upgradeExistentialDynamicMiddleware.enumerated() {
            let functionString = "\(function.arguments.first!.expression.as(ClosureExprSyntax.self)!.statements)"
            let name = "OpaqueDynamicMiddleware\(i)"
            let string = """
            // MARK: \(name)
            \(visibility)struct \(name): OpaqueDynamicMiddlewareProtocol {

                @inlinable
                \(visibility)func customLogic(
                    request: inout some HTTPRequestProtocol & ~Copyable,
                    response: inout some DynamicResponseProtocol
                ) throws(MiddlewareError) {
                    do { // TODO: use typed throw
                        \(functionString)
                    } catch {
                        throw .init(identifier: "\(name)HandleError", reason: "\\(error)")
                    }
                }

                @inlinable
                \(visibility)func handle(
                    request: inout some HTTPRequestProtocol & ~Copyable,
                    response: inout some DynamicResponseProtocol
                ) throws(MiddlewareError) -> Bool {
                    try customLogic(request: &request, response: &response)
                    return true
                }
            }
            """
            try! generatedDecls.append(StructDeclSyntax(.init(stringLiteral: string)))
        }
        return ""
    }()

    mutating func dynamicMiddlewareArray(mutable: Bool) -> [String] {
        var array = [String]()
        if autoGeneratedOpaqueDynamicMiddleware != nil {
            array.append(contentsOf: upgradeExistentialDynamicMiddleware.enumerated().map({ "OpaqueDynamicMiddleware\($0.offset)()" }))
        }
        if !dynamicMiddleware.isEmpty {
            array.append(contentsOf: dynamicMiddleware.map({ "\($0)" }))
        }
        return array
    }

    mutating func staticResponsesSyntax(
        mutable: Bool,
        context: some MacroExpansionContext,
        caseSensitive: Bool
    ) -> String? {
        return staticRoutesSyntax(
            mutable: mutable,
            context: context,
            isCaseSensitive: caseSensitive,
            redirects: staticRedirects.filter({ $0.0.isCaseSensitive == caseSensitive }),
            middleware: staticMiddleware,
            routes: caseSensitive ? staticCaseSensitiveRoutes : staticCaseInsensitiveRoutes
        )
    }

    mutating func dynamicResponsesString(
        mutable: Bool,
        context: some MacroExpansionContext,
        caseSensitive: Bool
    ) -> String? {
        return dynamicRoutesSyntax(
            mutable: mutable,
            context: context,
            isCaseSensitive: caseSensitive,
            routes: caseSensitive ? dynamicCaseSensitiveRoutes : dynamicCaseInsensitiveRoutes
        )
    }

    func conditionalRespondersString() -> String {
        var string:String
        if conditionalResponders.isEmpty {
            string = ":"
        } else {
            string = ""
            for (routePath, route) in conditionalResponders {
                string += "\n\(routePath.comment)\n\(routePath.path) : \(route.debugDescription),"
            }
            string.removeLast()
            string += "\n"
        }
        return string
    }
}

extension RouterStorage {
    struct Route {
        let startLine:String
        let buffer:SIMD64<UInt8>
        let responder:String

        var path: Substring {
            startLine.split(separator: " ")[1]
        }
        var paths: [Substring] {
            path.split(separator: "/")
        }
    }
}