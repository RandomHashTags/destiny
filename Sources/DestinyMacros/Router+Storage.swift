
import DestinyBlueprint
import DestinyDefaults
import SwiftSyntax
import SwiftSyntaxMacros

extension Router {
    struct Storage {
        var autoGeneratedStructs:[any DeclSyntaxProtocol] = []
        var autoGeneratedDynamicResponders:[String] = []
        var upgradeExistentialDynamicMiddleware:[FunctionCallExprSyntax] = []
        var dynamicMiddleware:[FunctionCallExprSyntax] = []
        var dynamicRedirects:[(any RedirectionRouteProtocol, SyntaxProtocol)] = []
        var dynamicRoutes:[(DynamicRoute, FunctionCallExprSyntax)] = []

        var staticMiddleware:[CompiledStaticMiddleware] = []
        var staticRedirects:[(any RedirectionRouteProtocol, SyntaxProtocol)] = []
        var staticRoutes:[(StaticRoute, FunctionCallExprSyntax)] = []
        
        var routeGroups:[any RouteGroupProtocol] = [] // TODO: refactor

        var conditionalResponders:[RoutePath:any ConditionalRouteResponderProtocol] = [:]
        var registeredPaths:Set<String> = []

        mutating func routeGroupsString(context: some MacroExpansionContext) -> String {
            return "" // TODO: refactor
            var string = ""
            if !routeGroups.isEmpty {
                string += "\n" + routeGroups.map({ "\($0)" }).joined(separator: ",\n") + "\n"
            }
            return string
        }

        func staticMiddlewareString() -> String {
            return staticMiddleware.isEmpty ? "" : "\n" + staticMiddleware.map({ "\($0)" }).joined(separator: ",\n") + "\n"
        }

        lazy var autoGeneratedOpaqueDynamicMiddleware: String? = {
            guard !upgradeExistentialDynamicMiddleware.isEmpty else { return nil }
            for (i, function) in upgradeExistentialDynamicMiddleware.enumerated() {
                let functionString = "\(function.arguments.first!.expression.as(ClosureExprSyntax.self)!.statements)"
                let name = "OpaqueDynamicMiddleware\(i)"
                let string = """
                // MARK: \(name)
                struct \(name): OpaqueDynamicMiddlewareProtocol {

                    @inlinable
                    func customLogic(
                        request: inout some HTTPRequestProtocol & ~Copyable,
                        response: inout some DynamicResponseProtocol
                    ) async throws {
                        \(functionString)
                    }

                    @inlinable
                    func handle(
                        request: inout some HTTPRequestProtocol & ~Copyable,
                        response: inout some DynamicResponseProtocol
                    ) async throws -> Bool {
                        try await customLogic(request: &request, response: &response)
                        return true
                    }
                }
                """
                try! autoGeneratedStructs.append(StructDeclSyntax(.init(stringLiteral: string)))
            }
            return ""
        }()

        mutating func dynamicMiddlewareString() -> String {
            var string = ""
            if autoGeneratedOpaqueDynamicMiddleware != nil {
                string += "\n\(upgradeExistentialDynamicMiddleware.enumerated().map({ "OpaqueDynamicMiddleware\($0.offset)()" }).joined(separator: ",\n")),\n"
            }
            if !dynamicMiddleware.isEmpty {
                string += "\n\(dynamicMiddleware.map({ "\($0)" }).joined(separator: ",\n"))\n"
            }
            return string
        }

        mutating func staticResponsesString(context: some MacroExpansionContext, caseSensitive: Bool) -> String {
            return staticRoutesString(
                context: context,
                isCaseSensitive: caseSensitive,
                redirects: staticRedirects.filter({ $0.0.isCaseSensitive == caseSensitive }),
                middleware: staticMiddleware,
                staticRoutes.filter({ $0.0.isCaseSensitive == caseSensitive })
            )
        }

        mutating func dynamicResponsesString(context: some MacroExpansionContext, caseSensitive: Bool) -> String {
            return dynamicRoutesString(context: context, isCaseSensitive: caseSensitive, dynamicRoutes.filter({ $0.0.isCaseSensitive == caseSensitive }))
        }

        func conditionalRespondersString() -> String {
            var string:String
            if conditionalResponders.isEmpty {
                string = ":"
            } else {
                string = ""
                for (routePath, route) in conditionalResponders {
                    string += "\n\(routePath.comment)\n\(routePath.path) : \(route.debugDescription),"
                }
                string.removeLast()
                string += "\n"
            }
            return string
        }
    }
}