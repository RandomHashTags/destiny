
import DestinyBlueprint
import DestinyDefaults
import SwiftSyntax
import SwiftSyntaxMacros

extension Router {
    static func compute(
        mutable: Bool,
        arguments: LabeledExprListSyntax,
        context: some MacroExpansionContext
    ) -> (router: String, structs: [any DeclSyntaxProtocol]) {
        var version = HTTPVersion.v1_1
        let defaultStaticErrorResponse = HTTPResponseMessage(
            version: HTTPVersion.v1_1,
            status: HTTPStandardResponseStatus.ok.code,
            headers: [:],
            cookies: [],
            body: "{\"error\":true,\"reason\":\"\\(error)\"}",
            contentType: HTTPMediaTypeApplication.json,
            charset: nil
        ).string(escapeLineBreak: true)
        var errorResponder = """
        StaticErrorResponder({ error in
            \"\(defaultStaticErrorResponse)\"
        })
        """
        var dynamicNotFoundResponder = "nil"
        var staticNotFoundResponder = ""
        var storage = RouterStorage()
        for child in arguments {
            if let label = child.label {
                switch label.text {
                case "version":
                    version = HTTPVersion.parse(context: context, expr: child.expression) ?? version
                case "errorResponder":
                    errorResponder = "\(child.expression)"
                case "dynamicNotFoundResponder":
                    dynamicNotFoundResponder = "\(child.expression)"
                case "staticNotFoundResponder":
                    staticNotFoundResponder = "\(child.expression)"
                case "redirects":
                    guard let array = child.expression.arrayElements(context: context) else { break }
                    parseRedirects(context: context, version: version, array: array, staticRedirects: &storage.staticRedirects, dynamicRedirects: &storage.dynamicRedirects)
                case "middleware":
                    guard let array = child.expression.arrayElements(context: context) else { break }
                    for element in array {
                        //print("Router;expansion;key==middleware;element.expression=\(element.expression.debugDescription)")
                        if let function = element.expression.functionCall {
                            parseMiddleware(context: context, function: function, storage: &storage)
                        } else if let expansion = element.expression.macroExpansion {
                            // TODO: support custom middleware
                            context.diagnose(DiagnosticMsg.unhandled(node: expansion))
                        } else {
                            context.diagnose(DiagnosticMsg.unhandled(node: element))
                        }
                    }
                case "routeGroups":
                    guard let array = child.expression.arrayElements(context: context) else { break }
                    for element in array {
                        if let function = element.expression.functionCall {
                            switch function.calledExpression.as(DeclReferenceExprSyntax.self)?.baseName.text {
                            case "RouteGroup":
                                let (decl, groupStorage) = RouteGroup.parse(
                                    context: context,
                                    version: version,
                                    staticMiddleware: storage.staticMiddleware,
                                    dynamicMiddleware: storage.dynamicMiddleware,
                                    autoGeneratedDynamicRespondersIndex: &storage.autoGeneratedDynamicRespondersIndex,
                                    function
                                )
                                storage.routeGroups.append(decl)
                                storage.autoGeneratedStructs.append(contentsOf: groupStorage.autoGeneratedStructs)
                                storage.upgradeExistentialDynamicMiddleware.append(contentsOf: groupStorage.upgradeExistentialDynamicMiddleware)
                            default:
                                context.diagnose(DiagnosticMsg.unhandled(node: function))
                            }
                        } else {
                            context.diagnose(DiagnosticMsg.unhandled(node: element))
                        }
                    }
                default:
                    break
                }
            } else if let function = child.expression.functionCall { // route
                parseRoute(context: context, version: version, function: function, storage: &storage)
            } else {
                // TODO: support custom routes
            }
        }
        if staticNotFoundResponder.isEmpty {
            staticNotFoundResponder = try! StringWithDateHeader("").responderDebugDescription(
                HTTPResponseMessage(
                    version: version,
                    status: HTTPStandardResponseStatus.notFound.code,
                    headers: [:],
                    cookies: [],
                    body: StringWithDateHeader("not found"),
                    contentType: HTTPMediaType(HTTPMediaTypeText.plain),
                    charset: Charset.utf8
                )
            )
        }
        if dynamicNotFoundResponder == "nil" {
            dynamicNotFoundResponder = "Optional<DynamicRouteResponder>.none"
        }
        let immutableRouter = httpRouter(
            mutable: false,
            context: context,
            errorResponder: errorResponder,
            dynamicNotFoundResponder: dynamicNotFoundResponder,
            staticNotFoundResponder: staticNotFoundResponder,
            storage: &storage
        )
        var string:String
        if mutable {
            var mutableStorage = RouterStorage()
            let mutableRouter = httpRouter(
                mutable: true,
                context: context,
                errorResponder: errorResponder,
                dynamicNotFoundResponder: dynamicNotFoundResponder,
                staticNotFoundResponder: staticNotFoundResponder,
                storage: &mutableStorage
            )
            string = "CompiledHTTPRouter("
            string += "\nimmutable: \(immutableRouter),"
            string += "\nmutable: \(mutableRouter)"
            string += "\n)"
        } else {
            string = immutableRouter
        }
        return (string, storage.autoGeneratedStructs)
    }

    private static func httpRouter(
        mutable: Bool,
        context: some MacroExpansionContext,
        errorResponder: String,
        dynamicNotFoundResponder: String,
        staticNotFoundResponder: String,
        storage: inout RouterStorage
    ) -> String {
        var routeGroupsString = storage.routeGroupsString(context: context)
        let conditionalRespondersString = storage.conditionalRespondersString()
        var string = "HTTPRouter("
        string += "\nerrorResponder: \(errorResponder),"
        string += "\ndynamicNotFoundResponder: \(dynamicNotFoundResponder),"
        string += "\nstaticNotFoundResponder: \(staticNotFoundResponder),"

        let caseSensitiveResponders = routeResponderStorage(
            mutable: mutable,
            staticResponses: storage.staticResponsesSyntax(mutable: mutable, context: context, caseSensitive: true),
            dynamicResponses: storage.dynamicResponsesString(mutable: mutable, context: context, caseSensitive: true),
            conditionalResponses: ":"
        )
        let caseInsensitiveResponders = routeResponderStorage(
            mutable: mutable,
            staticResponses: storage.staticResponsesSyntax(mutable: mutable, context: context, caseSensitive: false),
            dynamicResponses: storage.dynamicResponsesString(mutable: mutable, context: context, caseSensitive: false),
            conditionalResponses: conditionalRespondersString
        )
        string += "\ncaseSensitiveResponders: \(caseSensitiveResponders),"
        string += "\ncaseInsensitiveResponders: \(caseInsensitiveResponders),"
        if mutable {
            routeGroupsString = "RouteGroupStorage(\n[\(routeGroupsString)]\n)"
            string += "\nstaticMiddleware: StaticMiddlewareStorage([\(storage.staticMiddlewareString())]),"
        } else {
            string.insert(contentsOf: "Immutable", at: string.startIndex)
            routeGroupsString = "CompiledRouteGroupStorage(\(routeGroupsString))"
        }
        string += "\nopaqueDynamicMiddleware: [\(storage.dynamicMiddlewareString())],"
        string += "\nrouteGroups: \(routeGroupsString)"
        string += "\n)"
        return string
    }

    private static func routeResponderStorage(
        mutable: Bool,
        staticResponses: String,
        dynamicResponses: String,
        conditionalResponses: String
    ) -> String {
        var string = "\(mutable ? "" : "Compiled")RouterResponderStorage("
        string += "\nstatic: \(staticResponses),"
        string += "\ndynamic: \(dynamicResponses),"
        string += "\nconditional: [\(conditionalResponses)]"
        string += "\n)"
        return string
    }
}